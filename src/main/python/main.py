import sqlite3
import datetime
from typing import List, Tuple, Optional


class SupportTicketSystem:
    def __init__(self, db_name: str = "support_tickets.db"):
        self.db_name = db_name
        self.init_database()

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS tickets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                description TEXT NOT NULL,
                status TEXT NOT NULL DEFAULT 'open',
                priority TEXT NOT NULL DEFAULT 'medium',
                created_at TEXT NOT NULL,
                updated_at TEXT NOT NULL
            )
        ''')

        conn.commit()
        conn.close()

    def add_ticket(self, title: str, description: str, priority: str = "medium") -> int:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        current_time = datetime.datetime.now().isoformat()

        cursor.execute('''
            INSERT INTO tickets (title, description, priority, created_at, updated_at)
            VALUES (?, ?, ?, ?, ?)
        ''', (title, description, priority, current_time, current_time))

        ticket_id = cursor.lastrowid
        conn.commit()
        conn.close()

        return ticket_id

    def get_all_tickets(self) -> List[Tuple]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        cursor.execute('''
            SELECT id, title, description, status, priority, created_at, updated_at
            FROM tickets
            ORDER BY 
                CASE priority 
                    WHEN 'high' THEN 1
                    WHEN 'medium' THEN 2
                    WHEN 'low' THEN 3
                END,
                created_at DESC
        ''')

        tickets = cursor.fetchall()
        conn.close()

        return tickets

    def get_ticket(self, ticket_id: int) -> Optional[Tuple]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏ –ø–æ ID"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        cursor.execute('''
            SELECT id, title, description, status, priority, created_at, updated_at
            FROM tickets WHERE id = ?
        ''', (ticket_id,))

        ticket = cursor.fetchone()
        conn.close()

        return ticket

    def update_ticket_status(self, ticket_id: int, status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        current_time = datetime.datetime.now().isoformat()

        cursor.execute('''
            UPDATE tickets 
            SET status = ?, updated_at = ?
            WHERE id = ?
        ''', (status, current_time, ticket_id))

        conn.commit()
        conn.close()

    def delete_ticket(self, ticket_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        cursor.execute('DELETE FROM tickets WHERE id = ?', (ticket_id,))

        conn.commit()
        conn.close()


class ConsoleUI:
    def __init__(self):
        self.ticket_system = SupportTicketSystem()

    def print_header(self, text: str):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print("\n" + "=" * 60)
        print(f" {text}".center(60))
        print("=" * 60)

    def print_separator(self):
        """–ü–µ—á–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è"""
        print("-" * 60)

    def print_ticket_card(self, ticket: Tuple):
        """–ü–µ—á–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏ –≤ –ø—Å–µ–≤–¥–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ"""
        id, title, description, status, priority, created_at, updated_at = ticket

        # –¶–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
        status_colors = {
            'open': 'üü¢',
            'in_progress': 'üü°',
            'closed': 'üî¥',
            'resolved': 'üü£'
        }

        # –¶–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        priority_colors = {
            'high': 'üî¥',
            'medium': 'üü°',
            'low': 'üü¢'
        }

        status_icon = status_colors.get(status, '‚ö™')
        priority_icon = priority_colors.get(priority, '‚ö™')

        created = datetime.datetime.fromisoformat(created_at).strftime("%d.%m.%Y %H:%M")
        updated = datetime.datetime.fromisoformat(updated_at).strftime("%d.%m.%Y %H:%M")

        print(f"‚îå{'‚îÄ' * 58}‚îê")
        print(f"‚îÇ #{id:04d} {status_icon} {status.upper():<12} {priority_icon} {priority.upper():<8} ‚îÇ")
        print(f"‚îú{'‚îÄ' * 58}‚î§")
        print(f"‚îÇ {title:<56} ‚îÇ")
        print(f"‚îú{'‚îÄ' * 58}‚î§")

        # –†–∞–∑–±–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 56 —Å–∏–º–≤–æ–ª–æ–≤
        desc_lines = []
        current_line = ""
        for word in description.split():
            if len(current_line + " " + word) <= 56:
                current_line += " " + word if current_line else word
            else:
                desc_lines.append(current_line)
                current_line = word
        if current_line:
            desc_lines.append(current_line)

        for line in desc_lines:
            print(f"‚îÇ {line:<56} ‚îÇ")

        print(f"‚îú{'‚îÄ' * 58}‚î§")
        print(f"‚îÇ  –°–æ–∑–¥–∞–Ω–∞: {created:<44} ‚îÇ")
        print(f"‚îÇ  –û–±–Ω–æ–≤–ª–µ–Ω–∞: {updated:<42} ‚îÇ")
        print(f"‚îî{'‚îÄ' * 58}‚îò")

    def print_tickets_table(self, tickets: List[Tuple]):
        """–ü–µ—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –∑–∞—è–≤–æ–∫"""
        if not tickets:
            print(" –ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return

        print(f"‚îå{'‚îÄ' * 4}‚î¨{'‚îÄ' * 30}‚î¨{'‚îÄ' * 10}‚î¨{'‚îÄ' * 12}‚îê")
        print(f"‚îÇ {'ID':<2} ‚îÇ {'–ó–ê–ì–û–õ–û–í–û–ö':<28} ‚îÇ {'–°–¢–ê–¢–£–°':<8} ‚îÇ {'–ü–†–ò–û–†–ò–¢–ï–¢':<10} ‚îÇ")
        print(f"‚îú{'‚îÄ' * 4}‚îº{'‚îÄ' * 30}‚îº{'‚îÄ' * 10}‚îº{'‚îÄ' * 12}‚î§")

        for ticket in tickets:
            id, title, _, status, priority, _, _ = ticket

            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            display_title = title[:28] + "..." if len(title) > 28 else title

            status_icons = {'open': 'üü¢', 'in_progress': 'üü°', 'closed': 'üî¥', 'resolved': 'üü£'}
            priority_icons = {'high': 'üî¥', 'medium': 'üü°', 'low': 'üü¢'}

            status_display = f"{status_icons.get(status, '‚ö™')} {status}"
            priority_display = f"{priority_icons.get(priority, '‚ö™')} {priority}"

            print(f"‚îÇ {id:>2} ‚îÇ {display_title:<28} ‚îÇ {status_display:<8} ‚îÇ {priority_display:<10} ‚îÇ")

        print(f"‚îî{'‚îÄ' * 4}‚î¥{'‚îÄ' * 30}‚î¥{'‚îÄ' * 10}‚î¥{'‚îÄ' * 12}‚îò")

    def add_ticket_ui(self):
        """UI –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏"""
        self.print_header(" –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ô –ó–ê–Ø–í–ö–ò")

        title = input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞—è–≤–∫–∏: ").strip()
        if not title:
            print(" –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return

        print("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É):")
        description_lines = []
        while True:
            line = input().strip()
            if not line:
                break
            description_lines.append(line)

        description = "\n".join(description_lines)
        if not description:
            print(" –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return

        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:")
        print("1. üî¥ –í—ã—Å–æ–∫–∏–π")
        print("2. üü° –°—Ä–µ–¥–Ω–∏–π")
        print("3. üü¢ –ù–∏–∑–∫–∏–π")

        priority_choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2): ").strip()
        priorities = {'1': 'high', '2': 'medium', '3': 'low'}
        priority = priorities.get(priority_choice, 'medium')

        ticket_id = self.ticket_system.add_ticket(title, description, priority)
        print(f" –ó–∞—è–≤–∫–∞ #{ticket_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

    def view_tickets_ui(self):
        """UI –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫"""
        tickets = self.ticket_system.get_all_tickets()

        self.print_header(" –°–ü–ò–°–û–ö –ó–ê–Ø–í–û–ö")
        self.print_tickets_table(tickets)

        if tickets:
            print("\n–î–µ–π—Å—Ç–≤–∏—è:")
            print("1.  –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É –ø–æ–¥—Ä–æ–±–Ω–æ")
            print("2. ‚Ü©  –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")

            choice = input("–í–∞—à –≤—ã–±–æ—Ä: ").strip()
            if choice == '1':
                self.view_single_ticket_ui()

    def view_single_ticket_ui(self):
        """UI –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏"""
        try:
            ticket_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: "))
        except ValueError:
            print(" –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!")
            return

        ticket = self.ticket_system.get_ticket(ticket_id)
        if not ticket:
            print(f" –ó–∞—è–≤–∫–∞ #{ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        self.print_header(f"üìÑ –ó–ê–Ø–í–ö–ê #{ticket_id}")
        self.print_ticket_card(ticket)

        print("\n–î–µ–π—Å—Ç–≤–∏—è:")
        print("1.   –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
        print("2.   –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É")
        print("3.   –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É")

        choice = input("–í–∞—à –≤—ã–±–æ—Ä: ").strip()

        if choice == '1':
            self.change_status_ui(ticket_id)
        elif choice == '2':
            self.delete_ticket_ui(ticket_id)

    def change_status_ui(self, ticket_id: int):
        """UI –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:")
        print("1. üü¢ –û—Ç–∫—Ä—ã—Ç–∞")
        print("2. üü° –í —Ä–∞–±–æ—Ç–µ")
        print("3. üü£ –†–µ—à–µ–Ω–∞")
        print("4. üî¥ –ó–∞–∫—Ä—ã—Ç–∞")

        status_choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
        status_map = {'1': 'open', '2': 'in_progress', '3': 'resolved', '4': 'closed'}

        if status_choice in status_map:
            new_status = status_map[status_choice]
            self.ticket_system.update_ticket_status(ticket_id, new_status)
            print(f" –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{ticket_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'")
        else:
            print(" –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

    def delete_ticket_ui(self, ticket_id: int):
        """UI –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        confirm = input(f" –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É #{ticket_id}? (y/N): ").strip().lower()
        if confirm == 'y':
            self.ticket_system.delete_ticket(ticket_id)
            print(f" –ó–∞—è–≤–∫–∞ #{ticket_id} —É–¥–∞–ª–µ–Ω–∞!")
        else:
            print(" –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    def show_statistics(self):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        tickets = self.ticket_system.get_all_tickets()

        status_count = {}
        priority_count = {}

        for ticket in tickets:
            status = ticket[3]
            priority = ticket[4]

            status_count[status] = status_count.get(status, 0) + 1
            priority_count[priority] = priority_count.get(priority, 0) + 1

        self.print_header(" –°–¢–ê–¢–ò–°–¢–ò–ö–ê")

        print(" –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
        for status, count in status_count.items():
            status_icons = {'open': 'üü¢', 'in_progress': 'üü°', 'closed': 'üî¥', 'resolved': 'üü£'}
            print(f"   {status_icons.get(status, '‚ö™')} {status}: {count}")

        print("\n –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:")
        for priority, count in priority_count.items():
            priority_icons = {'high': 'üî¥', 'medium': 'üü°', 'low': 'üü¢'}
            print(f"   {priority_icons.get(priority, '‚ö™')} {priority}: {count}")

        print(f"\n –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(tickets)}")

    def main_menu(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        while True:
            self.print_header(" –°–ò–°–¢–ï–ú–ê –£–ß–ï–¢–ê –ó–ê–Ø–í–û–ö –¢–ï–•–ü–û–î–î–ï–†–ñ–ö–ò")

            print("1.  –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É")
            print("2.  –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏")
            print("3.  –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            print("4.  –í—ã—Ö–æ–¥")

            choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()

            if choice == '1':
                self.add_ticket_ui()
            elif choice == '2':
                self.view_tickets_ui()
            elif choice == '3':
                self.show_statistics()
            elif choice == '4':
                print(" –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print(" –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    ui = ConsoleUI()
    ui.main_menu()


if __name__ == "__main__":
    main()